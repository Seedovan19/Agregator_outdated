// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agregator "github.com/seedovan19/Agregator"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user agregator.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), email, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockWarehouse is a mock of Warehouse interface.
type MockWarehouse struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseMockRecorder
}

// MockWarehouseMockRecorder is the mock recorder for MockWarehouse.
type MockWarehouseMockRecorder struct {
	mock *MockWarehouse
}

// NewMockWarehouse creates a new mock instance.
func NewMockWarehouse(ctrl *gomock.Controller) *MockWarehouse {
	mock := &MockWarehouse{ctrl: ctrl}
	mock.recorder = &MockWarehouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouse) EXPECT() *MockWarehouseMockRecorder {
	return m.recorder
}

// Add_warehouse_record mocks base method.
func (m *MockWarehouse) Add_warehouse_record(warehouse_data agregator.Warehouse, building_data agregator.Building) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add_warehouse_record", warehouse_data, building_data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add_warehouse_record indicates an expected call of Add_warehouse_record.
func (mr *MockWarehouseMockRecorder) Add_warehouse_record(warehouse_data, building_data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add_warehouse_record", reflect.TypeOf((*MockWarehouse)(nil).Add_warehouse_record), warehouse_data, building_data)
}

// Show_warehouse_records mocks base method.
func (m *MockWarehouse) Show_warehouse_records() ([]agregator.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show_warehouse_records")
	ret0, _ := ret[0].([]agregator.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show_warehouse_records indicates an expected call of Show_warehouse_records.
func (mr *MockWarehouseMockRecorder) Show_warehouse_records() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show_warehouse_records", reflect.TypeOf((*MockWarehouse)(nil).Show_warehouse_records))
}
